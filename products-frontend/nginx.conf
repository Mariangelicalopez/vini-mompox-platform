# Define un bloque de servidor que escuchará las solicitudes HTTP
server {
    # Nginx escuchará en el puerto 80 dentro del contenedor
    # Este es el puerto por defecto para HTTP.
    listen 80;

    # Define el directorio raíz donde Nginx buscará los archivos estáticos de tu aplicación React.
    # Los archivos de tu build de React serán copiados aquí.
    root /usr/share/nginx/html;

    # Especifica los archivos de índice que Nginx buscará si se accede a un directorio.
    index index.html index.htm;

    # Configuración para manejar las rutas de tu aplicación React (Single Page Application - SPA).
    # Si una URL no coincide con un archivo o directorio existente, Nginx intentará servir index.html.
    # Esto es esencial para que el enrutamiento del lado del cliente de React funcione correctamente.
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Configuración del proxy inverso para las llamadas a la API del backend.
    # Cualquier solicitud que llegue a Nginx y comience con '/api' será redirigida.
    location /api {
        # 'proxy_pass' es la directiva que reenvía la solicitud.
        # 'http://products-service:8081' es la URL interna del servicio de backend dentro de la red de Docker Compose.
        # 'products-service' es el nombre del servicio que definiste en tu archivo docker-compose.yml para tu Spring Boot app.
        # '8081' es el puerto en el que tu aplicación Spring Boot escucha *dentro de su contenedor*.
        proxy_pass http://products-service:8081;

        # Estas directivas de 'proxy_set_header' reenvían cabeceras HTTP importantes
        # desde la solicitud original al backend. Son buenas prácticas para solicitudes proxy.
        proxy_set_header Host $host; # Reenvía la cabecera Host original.
        proxy_set_header X-Real-IP $remote_addr; # Reenvía la dirección IP real del cliente.
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Reenvía la cadena de IPs de proxy.
        proxy_set_header X-Forwarded-Proto $scheme; # Reenvía el protocolo original (http o https).
    }
}
